Managing secrets with Argo CD
You need to have a GitHub account for this exercise.

The example application is at https://github.com/codefresh-contrib/gitops-certification-examples/tree/main/secret-app. Fork this repository in your own account.

Objectives
In this track, this is what you'll learn:

Installation of the sealed secrets controller
How to encrypt secrets and commit them to Git
How the decryption controller works

Ex 1

Install the Sealed Secrets controller
We have placed the raw/unencrypted secrets in your work directory that are needed by the application. You can look at the files in the Editor tab.

These secrets are plain Kubernetes secrets and are not encrypted in any way. Let's install the Bitnami Sealed secrets controller to encrypt our secrets.

We installed Argo CD for you and you can login in the UI tab.

The UI starts empty because nothing is deployed on our cluster. Click the "New app" button on the top left and fill the following details:

application name : controller
project: default
SYNC POLICY: automatic
repository URL: https://github.com/codefresh-contrib/gitops-certification-examples
path: ./bitnami-sealed-controller
Cluster: https://kubernetes.default.svc (this is the same cluster where ArgoCD is installed)
Namespace: kube-system
Leave all the other values empty or with default selections. Finally click the Create button. The controller will be installed on the cluster.

Notice that are using a specific namespace for the controller and not the default one. It is imperative to enter kube-system otherwise the secrets controller will not work.

You can see that GitOps is not only useful for your own applications but also for other supporting applications as well.

Once you are ready to proceed, press Check.



Ex 2
Installing Kubeseal executable...
v

Use Kubeseal to encrypt secrets
The Sealed Secrets controller is running now on the cluster and it is ready to decrypt secrets.

We now need to encrypt our secrets and commit them to git. Encryption happens with the kubeseal executable. It needs to be installed in the same way as kubectl. It re-uses the cluster authentication already used by kubectl.

We have already installed kubeseal for you in this exercise. You can use it right away to encrypt your plain Kubernetes secrets and convert them to encrypted secrets

Run the following

kubeseal < unsealed_secrets/db-creds.yml > sealed_secrets/db-creds-encrypted.yaml -o yaml
kubeseal < unsealed_secrets/paypal-cert.yml > sealed_secrets/paypal-cert-encrypted.yaml -o yaml
Now you have encrypted secrets. Open the files in the "Editor" tab and copy the contents in your clipboard.

Then go the Github UI in another browser tab and commit/push their contents in your own fork of the application, filling the empty files at gitops-certification-examples/secret-app/manifests/db-creds-encrypted.yaml and gitops-certification-examples/secret-app/manifests/paypal-cert-encrypted.yaml

Once you are ready to proceed, press Check.


Ex 3

The Sealed secrets controller will automatically decrypt secrets and pass them to your application

Deploy secrets
Step 1
Now that all our secrets are in Git in an encrypted form we can deploy our application as normal.

Login in the Argo CD UI.

Click the "New app" button on the top left and fill the following details:

application name : demo
project: default
SYNC POLICY: automatic
repository URL: https://github.com/your_github_account/gitops-certification-examples
path: ./secret-app/manifests
Cluster: https://kubernetes.default.svc (this is the same cluster where ArgoCD is installed)
Namespace: default
Leave all the other values empty or with default selections. Finally click the Create button. The application entry will appear in the main dashboard. Click on it.

The application should now be deployed. Once it is healthy you can see it running in the "Deployed app" tab. Just for illustration purposes, the application is showing the secrets it can access. This way you can verify that the sealed secrets controller is working as expected, decrypting secrets on the fly.

Finish
Once you are ready to finish the track, press Check.



Ex 4
