Progressive delivery with Argo Rollouts and Argo CD
You need to have a GitHub account for this exercise.

The example application is at https://github.com/codefresh-contrib/gitops-certification-examples/tree/main/canary-app-timed. Fork this repository in your own account.

Objectives
In this track, this is what you'll learn:

Installation of the Argo Rollouts controller
How to install an API gateway
How to convert a Deployment to a Rollout
How to perform canary deployments
How to monitor the state of the deployment

Ex 1

Welcome
Our example application can be found at https://github.com/codefresh-contrib/gitops-certification-examples/tree/main/canary-app-timed.

Make sure to fork it to your own account and note down the URL. It should be something like:

https://github.com/<your user>/gitops-certification-examples/

It is a very simple application with one deployment and one service. Notice that the deployment has been converted to a Rollout and has an extra section about the canary deployment options. It also has timed stages with the following pattern:

30% of traffic will be sent to the canary
After 2 minutes the canary will get 60% of traffic
After 2 more minutes 100% of the traffic will be sent to the canary
You can also see the full source code at source-code-canary if you want to understand how the application is rendering a web page.

Once you are ready to proceed, press Next.

EX 2

Welcome
Our example application can be found at https://github.com/codefresh-contrib/gitops-certification-examples/tree/main/canary-app-timed.

Make sure to fork it to your own account and note down the URL. It should be something like:

https://github.com/<your user>/gitops-certification-examples/

It is a very simple application with one deployment and one service. Notice that the deployment has been converted to a Rollout and has an extra section about the canary deployment options. It also has timed stages with the following pattern:

30% of traffic will be sent to the canary
After 2 minutes the canary will get 60% of traffic
After 2 more minutes 100% of the traffic will be sent to the canary
You can also see the full source code at source-code-canary if you want to understand how the application is rendering a web page.

Once you are ready to proceed, press Next.

Ex 3

Install Ambassador
Blue/Green deployments can work on any vanilla Kubernetes cluster. But for Canary deployments you need a smart service layer that can gradually shift traffic to the canary pods while still keeping the rest of the traffic to the old/stable pods.

Argo Rollouts supports several service meshes and gateways for this purpose.

In this lesson we will use the popular Ambassador API Gateway for Kubernetes to split live traffic between the canary and old/stable version.

We installed Argo CD for you and you can login in the UI tab.

Click the "New app" button on the top left and fill the following details:

application name : ambassador
project: default
SYNC POLICY: automatic
AUTO-CREATE Namespace: enabled
repository URL: https://github.com/codefresh-contrib/gitops-certification-examples
path: ./ambassador-chart
Cluster: https://kubernetes.default.svc (this is the same cluster where ArgoCD is installed)
Namespace: ambassador
Leave all the other values empty or with default selections. Finally click the Create button. The Ambassador Gateway will be installed on the cluster.

Notice that we are not using the default namespace, but a brand new one. It is imperative that you select the "auto-create namespace" option.

auto-create

If you don't select this option, ArgoCD will not find the namespace and deployment will fail. Delete the application and create it again if you have a deployment issue.

You can also manually do if you forgot it in the UI:

kubectl create namespace ambassador
Try syncing again the application.

Again, you can see that GitOps is not only useful for your own applications but also for other supporting applications as well.

Wait some time until the gateway is fully synced and the deployment is marked as Healthy.

Once you are ready to proceed, press Check.


Ex 4

The first deployment
The Argo Rollouts controller is running now on the cluster and it is ready to handle deployments.

Lets deploy our application. Since this is the first deployment, there is no previous version and thus a normal deployment will take place.

We installed Argo CD for you and you can login in the UI tab.

Click the "New app" button on the top left and fill the following details

application name : demo
project: default
SYNC POLICY: Manual
repository URL: https://github.com/<your user>/gitops-certification-examples
path: ./canary-app-timed
Cluster: https://kubernetes.default.svc (this is the same cluster where ArgoCD is installed)
Namespace: default
Leave all the other values empty or with default selections.

Finally click the Create button. The application entry will appear in the main dashboard. Click on it.

The application will be initially "Out of Sync". Press the sync button to sync it and wait until it is healthy.

The application is deployed and you can see it in the "Live traffic" tab. You should see the following.

version1

Argo Rollouts also has an optional CLI that can be used for monitoring and promoting deployments

We have already installed kubectl argo rollouts for you in this exercise. And we can use it to monitor the first deployment

Run the following

kubectl argo rollouts list rollouts
kubectl argo rollouts status simple-rollout
kubectl argo rollouts get rollout simple-rollout
The last command shows the status of the rollout. Since this is the first version there is only one replicaset with ten pods.

You can also see this with

kubectl get rs
Once you are ready to proceed, press Check.

Ex 5
The Argo Rollouts controller will only activate if a change happens in a Rollout resource.

Canary deployments with GitOps
We are now ready to have a Canary deployment with the next version.

Go to your Git repository and change the file gitops-certification-examples/blob/main/canary-app-timed/rollout.yaml Change line 19 and enter v2.0 as the container image. Commit and push your changes.

Go into the ArgoCD UI and press the sync button to sync it.

Argo Rollouts will follow the pattern described in the rollout and do the following:

30% of traffic will be sent to the canary
After 2 minutes the canary will get 60% of traffic
After 2 more minutes 100% of the traffic will be sent to the canary
You can monitor the progress by using the command line

kubectl argo rollouts get rollout simple-rollout --watch
Notice that even though the next version of our application is already deployed, live traffic goes to both new/old versions. You can verify this by looking at the "live traffic" tab.

version1

Notice that at each step you can also look at the "stable" and "unstable" tabs and you can see that you can keep both old and new versions in play. This is useful if for some reason you have other applications in the cluster that always need to be pointed to the old or new version while a canary is in progress.

After all 4 minutes pass the canary is complete

Now all live traffic goes to the new version as can be seen from the "live traffic" tab.

version1

The deployment has finished successfully now.

Finish
Once you are ready to finish the track, press Check.




